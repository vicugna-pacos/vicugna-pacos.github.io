<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on アルパカのメモ</title><link>https://vicugna-pacos.github.io/posts/</link><description>Recent content in Posts on アルパカのメモ</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Aug 2020 15:54:58 +0900</lastBuildDate><atom:link href="https://vicugna-pacos.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugoで静的Webサイトを作る</title><link>https://vicugna-pacos.github.io/posts/2020/0827-hugo/</link><pubDate>Thu, 27 Aug 2020 15:54:58 +0900</pubDate><guid>https://vicugna-pacos.github.io/posts/2020/0827-hugo/</guid><description>Hugoとは 静的サイトジェネレータ。MarkdownファイルをHTMLファイルへ変換し、Webサイトにできるツール。
公式サイト
説明の前提条件 Hugoアプリケーションの置場所：C:\Hugo\bin
上記フォルダにPATHを通すので、置場所は違っていても大した問題ではない。
Webサイトのソースの置場所：C:\Hugo\Sites
これも実際はどこでも構わない。
インストール Hugoのバイナリを https://github.com/gohugoio/hugo/releases からダウンロードする。 Windows用のバイナリを探してダウンロード。 zipファイルを解凍したら、C:\Hugo\binをPATHに追加する。 もしexeファイルがhugo.exeではない場合、ファイル名を変更しておく。
稼働確認 コマンドプロンプトを起動し、hugo helpと入力する。以下のようなヘルプが出ればOK。
コマンドプロンプトは、「管理者として実行」しないとhugoコマンドが動作しない場合がある。 (おそらくログオンアカウントの権限による)
新しいサイトを作る コマンドプロンプトで以下を実行。
cd C:\Hugo\Sites hugo new site example.com sitesフォルダ配下にexample.comというフォルダが作られ、他にも色々フォルダが出来ている。
設定ファイルを編集する サイトフォルダ直下にあるconfig.tomlをテキストエディタで開くと、以下が既に書かれているので、適切な値へ直す。
baseURL = &amp;quot;http://example.org/&amp;quot; languageCode = &amp;quot;en-us&amp;quot; title = &amp;quot;My New Hugo Site&amp;quot; ソースをGitに登録する example.comフォルダをGitリポジトリとする。
テーマを適用する https://themes.gohugo.io/ へ行って、好きなテーマを探す。 テーマはすべてGitリポジトリにあって、使う場合はsubmoduleとして追加するか、cloneするか、頑張ってダウンロードするかのいずれかで取得する。 テーマを決めたら、themesフォルダ内に追加する。
git.exe submodule add -- &amp;#34;https://github.com/dim0627/hugo_theme_beg.git&amp;#34; &amp;#34;themes/beg&amp;#34; テーマを追加した後、config.tomlを編集し、themesフォルダ配下に作ったフォルダ名をテーマ名として指定する。
theme = &amp;#34;beg&amp;#34; 新しい記事を書く 以下を実行。
hugo new &amp;lt;セクション名&amp;gt;/my-first-post.md セクションが無い場合は、指定なしでも良い。 ブログサイトの記事を書くなら、セクション名はblogやpostsがよさそう。 mdファイルは、contentフォルダ配下に作成される。
セクション https://gohugo.io/content-management/sections/</description></item><item><title>Visual Studio Code の色々</title><link>https://vicugna-pacos.github.io/posts/2020/0823-vscode-tips/</link><pubDate>Sun, 23 Aug 2020 19:20:57 +0900</pubDate><guid>https://vicugna-pacos.github.io/posts/2020/0823-vscode-tips/</guid><description>はじめに VSCodeの使い方Tips色々
設定画面を開く Ctrl + , を押す。 または、メニューの「ファイル」→「ユーザー設定」→「設定」。
シングルクリックでファイルが開かないようにする 既定だと、ファイルをシングルクリックするとプレビューモードでファイルが開く(タブのファイル名がイタリックになっている)。 ダブルクリックで普通に開くが、操作しづらいのでプレビューをオフにする。
Workbench &amp;gt; Editor &amp;gt; Enable Preview のチェックを外す。
プレビューをオフにしただけだと、シングルクリックでファイルが開くのはそのまま。ダブルクリックでファイルを開くように変更する。
Workbench &amp;gt; List &amp;gt; OpenMode を doubleClickにする。
エクスプローラーのインデントを変更する 既定のままだと、エクスプローラーのファイルツリーのインデントが浅いが、このインデントの深さは設定で変更できる。
Workbench &amp;gt; Tree &amp;gt; Indent を変更する。
既定値は「8」なので、個人的には「16」などに変更すると良い感じ。
↓設定値変更前後の様子
参考：vs codeでExplorer（ファイルツリー）の階層構造を見やすくする - Qiita
Markdownのプレビューを横に表示する エディタを開いた状態で、Ctrl + K → V を押す(Vを押すときはCtrlキーから手を放す)。</description></item><item><title>HugoとGitHub ActionsでGitHub Pagesを自動デプロイ</title><link>https://vicugna-pacos.github.io/posts/2020/0823-hugo-github-actions/</link><pubDate>Sun, 23 Aug 2020 15:25:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/posts/2020/0823-hugo-github-actions/</guid><description>前提条件 Windows 10 Hugo v0.74.3(Windows版)がPCにインストール済み はじめに GitHub Pagesは所定のリポジトリをJekyllで変換して公開してくれるが、これをHugoを使って公開するようにしたい。 ローカルでHugoのパブリッシュを実行してコミット…という風に手動でやるのは面倒くさいので、mdファイルをコミット＆プッシュしたら、自動的にGitHub Pagesで公開されてほしい。
GitHub Pagesの公開先は&amp;lt;user&amp;gt;.github.ioとする。
Hugoの使い方については、下記参照。
【Hugo】静的Webサイトを作る - Qiita
GitHubにリポジトリを作成する &amp;lt;user&amp;gt;.github.ioという名前のpublicリポジトリを作成する。自動的にGitHub Pagesのユーザーページ元リポジトリとなる。
リポジトリをクローン PCにて、作成したリポジトリをクローンする。
Hugoで新しいサイトを作る クローンしたフォルダの親フォルダで下記コマンドを実行。
hugo new site [リポジトリのフォルダ名] --force 既存フォルダに対してのnew siteなので、フラグの--forceが必要。 Hugoのフォルダやファイルが作成される。
その後、テーマを設定しておく。
GitHub Actionsを設定 GitHub Actions による GitHub Pages への自動デプロイ - Qiita
上記記事を参考に、ローカルリポジトリで.github/workflows/gh-pages.ymlを作成し、サンプルをコピペする。
name: github pages on: push: branches: - master jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes fetch-depth: 0 # Fetch all history for .</description></item></channel></rss>