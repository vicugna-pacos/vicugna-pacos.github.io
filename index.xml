<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>アルパカのメモ</title><link>https://vicugna-pacos.github.io/</link><description>Recent content on アルパカのメモ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 22 Mar 2023 21:00:58 +0900</lastBuildDate><atom:link href="https://vicugna-pacos.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Outlook VBA 開発の始め方</title><link>https://vicugna-pacos.github.io/vba/outlook/get-started/</link><pubDate>Fri, 27 Aug 2021 16:41:31 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/get-started/</guid><description>はじめに Outlook VBA の始め方を記載する。 PC にインストール済みの Outlook に付随している Visual Basic for Applications を使ったマクロ開発を目指す。 Office のバージョンは 365 。 開発タブを表示する 既定では Outlook のリボンに「開発」タブが表示されていないので、</description></item><item><title>基本的なこと色々</title><link>https://vicugna-pacos.github.io/power-automate-desktop/basics/</link><pubDate>Thu, 08 Jul 2021 11:23:47 +0900</pubDate><guid>https://vicugna-pacos.github.io/power-automate-desktop/basics/</guid><description>インストール https://flow.microsoft.com/ja-jp/desktop/ 上記URLへアクセスし、アプリをダウンロードしてインストールする。 Windows 10 ユーザーであれば無料で利用できるが、以下の条件がある。 他のオンラインで使う Microsoft 製品 (例えば Power Automate のクラウドフローとか？)</description></item><item><title>Visual Studio Code で開発する</title><link>https://vicugna-pacos.github.io/powershell/vscode/</link><pubDate>Fri, 23 Apr 2021 16:03:28 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/vscode/</guid><description>参考：Using Visual Studio Code for PowerShell Development - PowerShell | Microsoft Docs はじめに VS Code で PowerShell を開発する方法を記載する。 Windows には PowerShell ISE というツールがあるが、ISE がサポートするのは PowerShell v5.1 以下で、それ以降のバージョンには対応していない。 そのため、な</description></item><item><title>開発環境の準備</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started-prepare/</link><pubDate>Mon, 08 Feb 2021 11:44:21 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started-prepare/</guid><description>はじめに 前提条件： Windows 10 Visual Studio 2019 C# 参考：Bot Framework SDK for .NET を使用したボットの作成 - Bot Service | Microsoft Docs Bot Framework SDK を使ってチャットボットを開発するのに必要な準備の手順を記載する。 本記事では、ローカルでテストするための環境の準</description></item><item><title>Adaptive Dialog とは</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/about/</link><pubDate>Fri, 08 Jan 2021 13:27:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/about/</guid><description>はじめに 参考： Introduction to adaptive dialogs - Bot Service | Microsoft Docs Adaptive Dialog のサンプル (GitHubリポジトリ) ボットとユーザーの会話は Dialog を使って実装するが、会話の複雑さが上がるほど中断とか分岐とか考慮しなくてはいけないことが増え、実装が</description></item><item><title>汎用ホストを使う</title><link>https://vicugna-pacos.github.io/dotnetcore/console/generic-host/</link><pubDate>Thu, 26 Nov 2020 15:01:47 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/console/generic-host/</guid><description>概要 汎用ホストとは、ASP.NETで提供されているいくつかの機能を、コンソールアプリでも使えるよう汎用的にしたもの。 使えるようになる機能の例は下記の通り。 依存性の注入 (DI) ログ 設定ファイル 起動環境の指定 etc&amp;hellip;</description></item><item><title>予算を作成して課金のアラートを設定する</title><link>https://vicugna-pacos.github.io/azure/budget-create/</link><pubDate>Thu, 08 Oct 2020 11:12:12 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/budget-create/</guid><description>クラウドの課金は怖いので、設定額を超えたらアラートが飛ぶようにする。 Azure ポータルサイトの左上にある「三」→「コストの管理と請求」をクリックする。 各項目を入力して「次へ」をクリック。 名前 - 予算の名前を入力</description></item><item><title>QnA Maker を作成する</title><link>https://vicugna-pacos.github.io/azure/qnamaker/create-knowledgebase/</link><pubDate>Thu, 08 Oct 2020 09:35:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/qnamaker/create-knowledgebase/</guid><description>前提条件 Azureのアカウントを持っている 価格レベル QnA Maker は、Azure の複数のリソース(Cognitive Search, Azure Search, App Service など)を組み合わせて提供されている製品みたいなもので、価格レベルや制限は組み合わされ</description></item><item><title>PowerShellでOutlookを操作する</title><link>https://vicugna-pacos.github.io/powershell/outlook/memo/</link><pubDate>Wed, 30 Sep 2020 20:08:58 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/outlook/memo/</guid><description>はじめに PowerShellでVBAみたいなことができる Outlook版。 前提条件 PowerShell v5.1 Outlook 365 起動と終了 function main() { # 起動済みのOutlookがあるか確認 $outlookProcess = Get-Process -Name &amp;#34;OUTLOOK&amp;#34; -ErrorAction SilentlyContinue $needQuit = $false if ($outlookProcess -eq $null) { $needQuit = $true } $outlook = New-Object -ComObject Outlook.Application try { $namespace =</description></item><item><title>はじめの一歩</title><link>https://vicugna-pacos.github.io/hugo/create-theme/get-started/</link><pubDate>Wed, 30 Sep 2020 18:55:51 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/create-theme/get-started/</guid><description>はじめに Hugoのテーマを作るときに、まずやること。 Hugo バージョン：v0.74.3 テーマをテストするためのサイトを用意する まずテーマを表示するためのサイトを作成する。公式で用意されているサンプル用のサイ</description></item><item><title>Hugoで静的Webサイトを作る</title><link>https://vicugna-pacos.github.io/hugo/hugo/</link><pubDate>Thu, 27 Aug 2020 15:54:58 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/hugo/</guid><description>Hugoとは 静的サイトジェネレータ。MarkdownファイルをHTMLファイルへ変換し、Webサイトにできるツール。 公式サイト バージョン：v0.74.3 説明の前提条件 Hugoアプリケーションの置場所：</description></item><item><title>差出人のメールアドレスを取得する</title><link>https://vicugna-pacos.github.io/vba/outlook/sender-email-address/</link><pubDate>Wed, 10 Nov 2021 09:34:55 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/sender-email-address/</guid><description>概要 受信したメール (MailItem) の差出人のメールアドレスを取得するには、SenderEmailAddress プロパティを参照する。 ただし、Exchange を使用してる かつ 差出人が同じ組織内のユーザーの場合は、メー</description></item><item><title>書式設定いろいろ</title><link>https://vicugna-pacos.github.io/word/style/</link><pubDate>Thu, 22 Jul 2021 14:53:09 +0900</pubDate><guid>https://vicugna-pacos.github.io/word/style/</guid><description>はじめに 文書作成時の書式設定の色々 標準のフォントの設定 「デザイン」タブ → 「フォント」 → 「フォントのカスタマイズ」 見出しと本文、日本語と英数字それぞれのフォントを指定する ここで設定したものが文書のテーマ</description></item><item><title>モジュール (psm1)</title><link>https://vicugna-pacos.github.io/powershell/modules/</link><pubDate>Mon, 10 May 2021 11:36:14 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/modules/</guid><description>概要 参考：PowerShell のモジュール詳解とモジュールへのコマンドレット配置手法を考える - tech.guitarrapc.cóm 参考：PSModulePath のインストールパスを変更する - PowerShell | Microsoft Docs</description></item><item><title>Windows サービスを作る</title><link>https://vicugna-pacos.github.io/dotnetcore/console/worker-service/</link><pubDate>Thu, 03 Dec 2020 16:22:40 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/console/worker-service/</guid><description>概要 前提条件： .NET Core 3.1 Visual Studio 2019 で開発 プロジェクトの作成 「Worker Service」のテンプレートを使い、プロジェクトを作成する。 プロジェクトを作成するときに下記のような画面が出るが、そのまま「作成」をク</description></item><item><title>QnA Maker からボットを作成する</title><link>https://vicugna-pacos.github.io/azure/qnamaker/create-bot/</link><pubDate>Thu, 08 Oct 2020 14:40:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/qnamaker/create-bot/</guid><description>はじめに QnA Maker にナレッジを登録した後、publishを行うとボット等からナレッジベースを使えるようになる。 ボットを作成する QnA Maker のメニューの「PUBLISH」へ移動し、「Publish」ボタンをクリックし</description></item><item><title>基本文法など</title><link>https://vicugna-pacos.github.io/hugo/create-theme/introduction/</link><pubDate>Wed, 30 Sep 2020 19:12:45 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/create-theme/introduction/</guid><description>はじめに Hugo バージョン：v0.74.3 Hugoのテンプレートは、Go言語の html/template とか text/template というライブラリを使用する。 詳しい使い方については、上記ライブラリのドキュメントを参照。 基本の文法 HTMLファイルで作っ</description></item><item><title>新しいボットを作成する</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started/</link><pubDate>Wed, 23 Sep 2020 19:11:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started/</guid><description>はじめに EmptyBot をテンプレートとして、新しいボットを作成する手順を記載する。Adaptive Dialog を使い、単一のメッセージを返すボットができるまでを目指す。 前提条件： Windows 10 Visual Studio 2019 C# 参考：Bot Framework SDK for .NET を使用したボ</description></item><item><title>HugoとGitHub ActionsでGitHub Pagesを自動デプロイ</title><link>https://vicugna-pacos.github.io/hugo/hugo-github-actions/</link><pubDate>Sun, 23 Aug 2020 15:25:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/hugo-github-actions/</guid><description>前提条件 Windows 10 Hugo v0.74.3(Windows版)がPCにインストール済み はじめに GitHub Pagesは所定のリポジトリをJekyllで変換して公開してくれるが、これをHugoを使って公開するようにしたい。 ロー</description></item><item><title>TO、CCなどのメールアドレスを取得する</title><link>https://vicugna-pacos.github.io/vba/outlook/recipient-email-address/</link><pubDate>Wed, 26 Jan 2022 10:13:55 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/recipient-email-address/</guid><description>概要 メールの TO、CC、BCCを取得するときは MailItem.Recipients を参照する。 MailItem には To プロパティ もあるが、こちらは宛先の表示名しか取得できない。 加えて、差出人の場合と同じように、同じ組織内の Exchange ユーザーの場合はアドレスの</description></item><item><title>アクティブラーニング</title><link>https://vicugna-pacos.github.io/azure/qnamaker/active-learning/</link><pubDate>Tue, 17 Nov 2020 13:20:33 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/qnamaker/active-learning/</guid><description>アクティブラーニングとは 参考：Active learning suggestions - QnA Maker - Azure Cognitive Services | Microsoft Docs QnA Maker のアクティブラーニングを有効にすると、システムがナレッジベースに追加したほうがいいQ&amp;amp;Aを提案してくれるようになる。 管理者</description></item><item><title>ボットを Azure へデプロイ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/deploy/</link><pubDate>Mon, 12 Oct 2020 15:25:42 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/deploy/</guid><description>はじめに ローカルで開発したボットを、Azure へデプロイする手順を記載する。 前提条件： Windows 10 Visual Studio 2019 C# Azure のアカウント作成済み GitHub のアカウント作成済み Azure で Web App Bot を作成 Azureポータルで「リソースの作成」を選</description></item><item><title>各テンプレートファイルについて</title><link>https://vicugna-pacos.github.io/hugo/create-theme/each-template-file/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/create-theme/each-template-file/</guid><description>はじめに Hugoのテーマの作り方。 Hugo バージョン：v0.74.3 baseof.htmlを作る このファイルが全てのページのベースとなる。 layouts\_default\baseof.htmlを開くと、す</description></item><item><title>検索やフィルターの構文</title><link>https://vicugna-pacos.github.io/vba/outlook/search-and-filter/</link><pubDate>Tue, 02 Mar 2021 15:01:51 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/search-and-filter/</guid><description>はじめに Outlook VBA でメールや予定の検索を行う際、Items.Find や Items.Restrict を使用する。このメソッドの引数に指定するフィルター構文について分かった部分をまとめた。 参考： Filtering Items | Microsoft Docs Outlookのバージョン：Of</description></item><item><title>ボットを Teams に配布する</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/distribute-teams/</link><pubDate>Mon, 15 Feb 2021 14:57:41 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/distribute-teams/</guid><description>はじめに Azure にボットを配置した後、そのボットをTeamsで利用できるようにする手順を記載する。 参考： Connect a bot to Microsoft Teams - Bot Service | Microsoft Docs Azure のボットにTeamsのチャネルを追加する手順 Get started - Build a bot - Teams | Microsoft Docs Teams に App Studio を</description></item><item><title>こんなときはこうする</title><link>https://vicugna-pacos.github.io/hugo/create-theme/how-to/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/create-theme/how-to/</guid><description>日付のフォーマット Go独特の書き方をする。 例えば、年はyyyyとかではなく、2006と書く。フィールドごとに固定値があるらしい。 以下、Goのページから引っ張ってきた表記のサンプル： ANSIC = &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot; UnixDate = &amp;quot;Mon</description></item><item><title>メール受信イベント (NewMailEx)</title><link>https://vicugna-pacos.github.io/vba/outlook/newmail/</link><pubDate>Mon, 01 Mar 2021 14:19:38 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/newmail/</guid><description>NewMailEx このイベントは、Outlook が受信したすべてのアイテムについて発生する。 アイテムの種類はメールに限らず、例えば、MailItem, MeetingItem, SharingItem 等が該当する。 引数の EntryIDsCollection が受信した Item の ID なので、Item オブジェ</description></item><item><title>ボットのしくみ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/basics/</link><pubDate>Wed, 23 Sep 2020 19:11:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/basics/</guid><description>前提条件 Visual Studio 2019 Community 版で開発 言語はC#を選択 ボットのしくみ 参考：ボットのしくみ - Bot Service | Microsoft Docs ユーザーとボットとの間で行われるやり取りの一つ一つを「アクティビティ」と呼ぶ。 Bot Framework Serviceは、ユーザーがボッ</description></item><item><title>Adaptive Card を送る</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-card/</link><pubDate>Fri, 13 Nov 2020 12:47:14 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-card/</guid><description>Adaptive Card とは ボットからユーザーへ送信できるメッセージの一つで、ボタンとか画像とか色々含めたカードのこと。 JSON形式で定義し、カードは色々なプラットフォームで使用できる。 Adaptive Cardのサイト Bot Framework SDK においては</description></item><item><title>テキストメッセージの送受信</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/send-and-receive-message/</link><pubDate>Fri, 02 Oct 2020 15:09:42 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/send-and-receive-message/</guid><description>メッセージの受信 ユーザーが送ってきたメッセージは、以下のようにして受け取る。 var responseMessage = turnContext.Activity.Text; メッセージの送信 ボットからシンプルなテキストを送るには、以下のようにする。 await turnContext.SendActivityAsync(&amp;#34;Welcome!&amp;#34;); または、以下のようにする。 var text = &amp;#34;Welcome!&amp;#34;; var msg</description></item><item><title>記憶の管理 (State)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/state/</link><pubDate>Fri, 02 Oct 2020 12:04:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/state/</guid><description>Stateの保存場所 ボットは、Webアプリケーションと同じように基本的にはステートレスである。 1回目のターンでやりとりした内容は、基本的には2回目ではもう覚えていない。 しかし、より充実した機能を提供す</description></item><item><title>会話の実装 (Dialog)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/dialog/</link><pubDate>Fri, 02 Oct 2020 13:55:11 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/dialog/</guid><description>はじめに 参考： Dialogs within the Bot Framework SDK - Bot Service | Microsoft Docs 前提条件： Windows 10 Visual Studio 2019 C# Dialog は SDK の中核をなすもので、ユーザーとボットの会話のやり取りの管理を助けるライブラリである。 ステートレスなWebアプリにおいて、「今どこまで話</description></item><item><title>ボットからメッセージを送る (プロアクティブなメッセージ)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/proactive-message/</link><pubDate>Thu, 17 Dec 2020 15:42:46 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/proactive-message/</guid><description>前提条件 Windows 10 Bot Framework SDK v4 .NET Core C# ボット側からメッセージを送る チャットボットは、基本的にユーザーから会話が始まりボットは返事をするだけだが、ボット側からメッセージを送ることもできる。 ボットから話しかけることを</description></item><item><title>ローカルのボットをTeamsでデバッグ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/debug-with-teams/</link><pubDate>Fri, 18 Dec 2020 11:35:12 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/debug-with-teams/</guid><description>概要 ローカルでボットをテストする場合、Bot Framework Emulator を使えば基本的なデバッグは行える。 ただこれでは、Teams など特定のアプリと接続したときの検証はできない。 本記事では、ローカルにあるボットを Teams でデバッグ</description></item><item><title>App Insights でログを記録</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/telemetry/</link><pubDate>Fri, 15 Jan 2021 15:42:29 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/telemetry/</guid><description>はじめに 参考： Add telemetry to your bot - Bot Service | Microsoft Docs Azure に Web アプリを置く場合、ログは Application Insights に記録するのが一つの方法である。 Application Insights にログを記録しておくと、あとから検索・分析ができたりする。 Bot Framework SDK にも、Application Insights</description></item><item><title>Teams のチャネルの投稿用アドレスを取得できないというメモ</title><link>https://vicugna-pacos.github.io/azure/logic-apps/teams-get-channel-email/</link><pubDate>Wed, 22 Mar 2023 21:00:58 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/teams-get-channel-email/</guid><description>Teams のチャネルで取得できるメッセージ投稿用のメールアドレスを、Power Automate のクラウド フローで取得できるか？ 結論：できない。 Teams コネクタの「チャネルの一覧」アクション Teams コネクタの「チャネルの一覧」アクション</description></item><item><title>Graph PowerShell SDK</title><link>https://vicugna-pacos.github.io/powershell/graphsdk/</link><pubDate>Fri, 14 Oct 2022 20:34:37 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/graphsdk/</guid><description>はじめに PowerShell のコマンドレットは、2022年12月以降に廃止される予定。そのため、Graph PowerShell SDK への移行が必要。 MSOnline / AzureAD PowerShell から Graph PowerShell SDK への移行について 1_概要 | Japan Azure Identity Support Blog インストール Microsoft Graph SDK をインストールする -</description></item><item><title>描画キャンバスをPNGへ変換</title><link>https://vicugna-pacos.github.io/vba/word/convert-canvas-to-png/</link><pubDate>Wed, 05 Oct 2022 20:53:39 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/word/convert-canvas-to-png/</guid><description>概要 ドキュメント内の描画キャンバスを、PNGへ変換する。 変換方法はいたって原始的： 描画キャンバスをコピーする 形式を選択して貼り付けで、PNGを指定する 描画キャンバスを削除 Public Sub 描画キャンバスをPNGへ変</description></item><item><title>定型文を登録して使う</title><link>https://vicugna-pacos.github.io/outlook/teikeibun/</link><pubDate>Fri, 17 Jun 2022 14:26:31 +0900</pubDate><guid>https://vicugna-pacos.github.io/outlook/teikeibun/</guid><description>概要 Outlook でメールを書いているときに、本文に定型文を使いたいときがある。 そんなときは、「クイックパーツ」が活用できそう。 定型文の登録 新しいメールの作成画面で、本文に定型文を書き込む。 文が出来上がったら、該</description></item><item><title>フローの流れ方</title><link>https://vicugna-pacos.github.io/azure/logic-apps/control-flow/</link><pubDate>Fri, 15 Apr 2022 13:29:45 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/control-flow/</guid><description>フローの流れ方 フローは矢印の通り上から下に向かって実行される。上下のアクションは「上のアクションの終了ステータスが 成功 だったら、下アクションを実行する」という感じで繋がっている。 アクションの終了ステー</description></item><item><title>メモ</title><link>https://vicugna-pacos.github.io/vba/powerpoint/memo/</link><pubDate>Wed, 13 Apr 2022 14:34:00 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/powerpoint/memo/</guid><description>参照設定 Excel VBA など PowerPoint 以外から PowerPoint を操作する場合は、下記を参照設定に追加する。 「Microsoft PowerPoint xx.x Object Library」 ファイルの新規作成 Application オブジェクトの Presentations.Add メソッドを使う。 PowerPoint の場合、pptx ファイル ＝ Presentation オブ</description></item><item><title>Planner の操作</title><link>https://vicugna-pacos.github.io/azure/logic-apps/planner/</link><pubDate>Thu, 17 Mar 2022 16:18:55 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/planner/</guid><description>MS のドキュメント チェックリスト付きのタスクを作成する 「タスクを作成する (CreateTask_V3)」アクションを使う。ただ、このアクションで指定できるのは下記の項目だけで、チェックリストやコメントは</description></item><item><title>毎月第2金曜日だけフローを実行する</title><link>https://vicugna-pacos.github.io/azure/logic-apps/recurrence-nth-weekday/</link><pubDate>Fri, 11 Mar 2022 09:16:30 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/recurrence-nth-weekday/</guid><description>はじめに Power Automate のフローを、毎月第2金曜日、のように「第n●曜日」だけ実行したい場合のサンプル。 スケジュール済みクラウドフローを作成 新しいフローを作成するときに、「スケジュール済みクラウドフロー」を選ぶ。</description></item><item><title>チャットのメッセージに動的なリンクを挿入する</title><link>https://vicugna-pacos.github.io/azure/logic-apps/trouble-shooting-dynamiclink/</link><pubDate>Wed, 02 Mar 2022 16:36:48 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/trouble-shooting-dynamiclink/</guid><description>発端 Power Automate で Teams のメッセージを送る時に、先のアクションで取得したURLを送りたいときがある。 そんな時、「チャットまたはチャネルでメッセージを投稿する」アクションで以下のようなメッセージを作った。 しかし、こ</description></item><item><title>数字だけの文字列が数値型になってしまう</title><link>https://vicugna-pacos.github.io/azure/logic-apps/trouble-shooting-numonlystring/</link><pubDate>Wed, 02 Mar 2022 11:33:30 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/trouble-shooting-numonlystring/</guid><description>発端 Power Automate のクラウドフローで、下記のような分岐を作った。 変数「タスク期限」には「2022-03」という形式で年月が入っているので、その末尾が四半期末の月かチェックしたかった。 しかし、フローを実行したら下</description></item><item><title>今日の当番をTeamsに通知するサンプル</title><link>https://vicugna-pacos.github.io/azure/logic-apps/sample-toban-notification/</link><pubDate>Mon, 28 Feb 2022 16:07:40 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/sample-toban-notification/</guid><description>はじめに 職場の電話当番とか掃除当番の表をExcelで管理して、毎日決まった時間に今日と明日の当番をTeamsへ通知するサンプル。 使うもの： Excel Office Scripts Power Automate SharePoint (または OneDrive) Teams 当番表の作成 当番表と、担当者のメールア</description></item><item><title>Word の使い方</title><link>https://vicugna-pacos.github.io/word/how-to-use/</link><pubDate>Fri, 25 Feb 2022 10:53:25 +0900</pubDate><guid>https://vicugna-pacos.github.io/word/how-to-use/</guid><description>はじめに 自分なりに確立してきた Word の使い方を記載する。 仕様書や手順書を作る場合、Excel 方眼紙でなんとか頑張るよりは、Word を使う方が適している場合が多い。Excel は表計算ソフトであって、文書作成</description></item><item><title>予定の一覧をExcelに出力する</title><link>https://vicugna-pacos.github.io/vba/outlook/sample-export-appointments/</link><pubDate>Fri, 11 Feb 2022 11:25:26 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/sample-export-appointments/</guid><description>はじめに Outlook の予定表を一覧表にして Excel へ出力するサンプル。 処理の主体は Outlook の操作だが、Excel ファイルを作ってそっちに VBA を書いていく。 Excel ファイルの準備 マクロ有効ブックを作成し、以下のようなシートを作る。 B1</description></item><item><title>英語になってしまったフォルダ名を直す</title><link>https://vicugna-pacos.github.io/windows/jpn-libraries-folder/</link><pubDate>Fri, 21 Jan 2022 10:54:11 +0900</pubDate><guid>https://vicugna-pacos.github.io/windows/jpn-libraries-folder/</guid><description>現象 Windows 10 のPCを使っていて、ある時からライブラリのフォルダが英語になってしまった。 私の場合は、ダウンロードフォルダが英語になってしまった。 原因 私の場合、ダウンロードフォルダにあるファイルを、システムフ</description></item><item><title>管理しやすい集計表の作り方</title><link>https://vicugna-pacos.github.io/excel/basics-data/</link><pubDate>Tue, 28 Dec 2021 14:41:24 +0900</pubDate><guid>https://vicugna-pacos.github.io/excel/basics-data/</guid><description>はじめに Excel で集計表を作る時に、管理しやすい作り方を記載する。 今回は例として、従業員の残業時間の一覧表を挙げる。 この表に直接残業時間などを入力しても良いが、Excelのデータは「入力用」「集計用」「表示</description></item><item><title>列番号と列文字の変換</title><link>https://vicugna-pacos.github.io/vba/excel/convert-column-num-letter/</link><pubDate>Mon, 20 Dec 2021 16:18:08 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/excel/convert-column-num-letter/</guid><description>列番号→列文字への変換 Private Function ColNumToLetter(colIndex As Integer) As String Dim result As String Dim colNum As Integer Dim colMod As Integer Dim cnt As Integer result = &amp;#34;&amp;#34; colNum = colIndex cnt = 1 Do While colNum &amp;gt; 0 And cnt &amp;lt; 10 colMod = (colNum - 1) Mod 26 colNum = WorksheetFunction.RoundDown((colNum - 1) / 26, 0) result = Chr(65 + colMod) &amp;amp; result cnt = cnt + 1 Loop ColNumToLetter = result End Function</description></item><item><title>Incoming Webhook でメッセージを送る</title><link>https://vicugna-pacos.github.io/teams/incoming-webhook/</link><pubDate>Thu, 09 Dec 2021 15:42:15 +0900</pubDate><guid>https://vicugna-pacos.github.io/teams/incoming-webhook/</guid><description>はじめに Teams の特定のチャネルへメッセージを送る方法の一つ、Incoming Webhook の使い方を記載する。 Incoming Webhook の追加 メッセージ送信先のチャネルのコネクタを追加する。 コネクタの一覧から Incoming Webhook を探し、「構成」をクリック</description></item><item><title>ブラウザ自動化</title><link>https://vicugna-pacos.github.io/power-automate-desktop/browser-automation/</link><pubDate>Sun, 21 Nov 2021 16:20:40 +0900</pubDate><guid>https://vicugna-pacos.github.io/power-automate-desktop/browser-automation/</guid><description>基本 Power Automate Desktop でのブラウザ操作について。 アクションは「ブラウザー自動化」の中にある。 UI要素の管理 アクションごとにUI要素を指定するのではなく、フロー全体で一括してUI要素を管理し、それをアクションで使う</description></item><item><title>テーブル (ListObject)</title><link>https://vicugna-pacos.github.io/vba/excel/list-object/</link><pubDate>Fri, 22 Oct 2021 15:17:46 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/excel/list-object/</guid><description>はじめに シートに作った表に対して、「挿入」タブ → 「テーブル」を選ぶと テーブル というひとかたまりになる。 こうすると VBA でも ListObject として扱えるようになり、一覧データの操作が楽になる。 リストの名前 リスト内のセルを</description></item><item><title>ファイルを開く＆保存するダイアログ</title><link>https://vicugna-pacos.github.io/vba/filedialog/</link><pubDate>Mon, 18 Oct 2021 15:55:23 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/filedialog/</guid><description>はじめに VBA でファイルを指定するダイアログを表示する方法はいくつかあるが、 一番柔軟性があるのは Application.FileDialog だと思われる。 Excel の Application オブジェクトに付いているプロパティで、Outlook の Application オブジェクトにはない。 そのため</description></item><item><title>繰り返しの予定</title><link>https://vicugna-pacos.github.io/vba/outlook/recurring/</link><pubDate>Wed, 13 Oct 2021 16:22:59 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/recurring/</guid><description>概要 Outlook の予定またはタスクで設定できる「繰り返し」について。 参照：RecurrencePattern object (Outlook) | Microsoft Docs AppointmentItem または TaskItem で設定できる。 上記2つには IsRecurring(Boolean) プロパティがあり、まずこれで繰り返しのアイテムかどうか</description></item><item><title>月初～今日までの予定の数を数える</title><link>https://vicugna-pacos.github.io/vba/outlook/sample-count-appointment/</link><pubDate>Fri, 08 Oct 2021 13:11:38 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/sample-count-appointment/</guid><description>当サンプルについて 在宅勤務が始まったころ、部門のルールで、テレワークするか出勤するかを日々チャットツールに連絡することになった。 加えてテレワークの場合は、月初から何回目のテレワークかを添える必要があっ</description></item><item><title>Office スクリプト</title><link>https://vicugna-pacos.github.io/excel/office-scripts/</link><pubDate>Thu, 09 Sep 2021 18:01:48 +0900</pubDate><guid>https://vicugna-pacos.github.io/excel/office-scripts/</guid><description>はじめに Office スクリプトは、Web 版 Excel で使用できるスクリプトの仕組み。VBA の Web 版と捉えられる。 言語は TypeScript。 Office スクリプトを使うには、Office 365 の商用または教育向けライセンスが必要。もし</description></item><item><title>キャンセル済みの会議予定を削除する</title><link>https://vicugna-pacos.github.io/vba/outlook/sample-delete-canceled-item/</link><pubDate>Wed, 01 Sep 2021 10:14:39 +0900</pubDate><guid>https://vicugna-pacos.github.io/vba/outlook/sample-delete-canceled-item/</guid><description>はじめに 自分以外の人が作成した会議予定がキャンセルされると、「キャンセル済み」とか「Canceled」と件名についたメールが届く。 このサンプルでは、受信トレイに届いたこのメールを一括で処理して、キャン</description></item><item><title>Wordでアンケートを作り、Excelで集計する</title><link>https://vicugna-pacos.github.io/word/survey/</link><pubDate>Fri, 20 Aug 2021 11:18:36 +0900</pubDate><guid>https://vicugna-pacos.github.io/word/survey/</guid><description>はじめに アンケートを集めるなら、Microsoft 365 とか Google のフォーム機能を使えばいい。 しかし、何らかの理由でそれらを使えないときに、Word でアンケートを作って Excel で回収する例を記載する。 端的に書くと、</description></item><item><title>LUIS を使う</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/luis/</link><pubDate>Wed, 30 Jun 2021 10:44:20 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/luis/</guid><description>はじめに ボットに LUIS を追加する手順を記載する。 Bot Framework のドキュメントから Adaptive Dialog での実装方法が消えているため、Adaptive Dialog なしでの実装方法である。 botframework-cli のインストール LUIS アプリケーションのインテントなどを、ソー</description></item><item><title>タブや改行などの制御文字を挿入する</title><link>https://vicugna-pacos.github.io/power-automate-desktop/insert-control-code/</link><pubDate>Tue, 22 Jun 2021 10:43:10 +0900</pubDate><guid>https://vicugna-pacos.github.io/power-automate-desktop/insert-control-code/</guid><description>現象 Power Automate Desktop には、タブや改行を表すコードがない。 改行コードは「テキストに行を追加」で挿入できる。 ただこのステップで追加されるのは \r\n であり、 \n だけ追加することはできない。 解決策 「テキストを置換する」で正規</description></item><item><title>先頭のゼロが消えてしまう</title><link>https://vicugna-pacos.github.io/power-automate-desktop/keep-zero/</link><pubDate>Mon, 21 Jun 2021 14:26:03 +0900</pubDate><guid>https://vicugna-pacos.github.io/power-automate-desktop/keep-zero/</guid><description>先頭のゼロが消えてしまう 例えばテキストフィールドへの入力のステップを作る際、数字のみのテキストを入力させようとすると、先頭にゼロがあっても確定した後に消えてしまう。 おそらく自動的に数字と判断され、削除</description></item><item><title>色々メモ</title><link>https://vicugna-pacos.github.io/azure/logic-apps/memo/</link><pubDate>Tue, 18 May 2021 16:05:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/memo/</guid><description>Excel SharePoint, OneDrive に保存した Excel ファイルを操作できるが、テーブルの取得やテーブルへの行の追加など、一覧データの取得、更新くらいしかできない。 テーブル名を指定してデータを取得 「表内に存在する行を一覧表示 (List rows present in a ta</description></item><item><title>アクセス許可</title><link>https://vicugna-pacos.github.io/azure/qnamaker/access-control/</link><pubDate>Mon, 26 Apr 2021 13:37:41 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/qnamaker/access-control/</guid><description>概要 QnAMaker で FAQ チャットボットを運用するときに、例えば経理部 FAQ の場合だと経理部の人も QnAMaker ポータルサイト へアクセスしてナレッジベースを編集することになる。 そのためには、経理部の人にも Azure アカウントを作成し、ナレッ</description></item><item><title>スクリプトのサンプル</title><link>https://vicugna-pacos.github.io/winactor/script-samples/</link><pubDate>Thu, 11 Mar 2021 13:54:46 +0900</pubDate><guid>https://vicugna-pacos.github.io/winactor/script-samples/</guid><description>はじめに WinActor の「スクリプト実行」で利用できるスクリプトのサンプル集。 同梱で用意されているものを少し改変しただけのものも含む。 前提条件： WinActor v7.2.0 以上で動作確認。 相対パスを絶対パスへ変換 $ で始まる変数は WinActor であら</description></item><item><title>HttpClient</title><link>https://vicugna-pacos.github.io/dotnetcore/httpclient/</link><pubDate>Mon, 08 Mar 2021 15:49:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/httpclient/</guid><description>はじめに .NET Core (C#) で API を実行したい場合などは、System.Net.Http.HttpClient を使う。 HttpClient のインスタンスはアプリケーションで1つになるように定義する。 IDisposable インターフェイスを実装しているが、</description></item><item><title>2021年3月からの無償化についての検証</title><link>https://vicugna-pacos.github.io/power-automate-desktop/free-202103/</link><pubDate>Wed, 03 Mar 2021 10:30:51 +0900</pubDate><guid>https://vicugna-pacos.github.io/power-automate-desktop/free-202103/</guid><description>はじめに 参考： Automate tasks with Power Automate Desktop for Windows 10—no additional cost | Power Automate Blog Windows 10 ユーザーは追加料金なしで Power Automate Desktop を利用できるようになった。 これだけ聞くと他RPA製品を駆逐する勢いを感じるが、実際はどうなのか、試しに触れてみた。</description></item><item><title>メール受信をトリガーにする方法</title><link>https://vicugna-pacos.github.io/others/mail-notification/</link><pubDate>Mon, 01 Mar 2021 13:37:36 +0900</pubDate><guid>https://vicugna-pacos.github.io/others/mail-notification/</guid><description>はじめに 業務の効率化をしたくて、メール受信をトリガーにスクリプトを実行させる方法がないかと調べた記録。 前提条件： 職場では Microsoft 365 を使っている 組織アカウントを使っている 私は組織の管理者ではない Graph API Graph API とは、</description></item><item><title>単体テスト (xUnit)</title><link>https://vicugna-pacos.github.io/dotnetcore/unittest/</link><pubDate>Thu, 25 Feb 2021 10:35:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/unittest/</guid><description>はじめに .NET Core で単体テストをする方法について記載する。 前提条件： Visual Studio 2019 Community 版 xUnit v2.4.1 .NET Core 3.1 C# コードからテストメソッドを生成する 参考：Create unit test method stubs - Visual Studio | Microsoft Docs コード上のメソッド、型名、名前空間のいずれか</description></item><item><title>COM 参照で Excel を読み書きする</title><link>https://vicugna-pacos.github.io/dotnetcore/excel-com/</link><pubDate>Fri, 19 Feb 2021 09:37:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/excel-com/</guid><description>はじめに .NET Core のコンソールアプリで、COM経由でExcelを操作できるようにする。 前提条件： Visual Studio 2019 参考： .NET core 3.0 and MS Office Interop - Stack Overflow .NET Core で COM 参照を追加する方法が回答されている Incorrect COMReference entry when using Office interop · Issue #5735 · dotnet/project-system csproj</description></item><item><title>ミドルウェア</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/middleware/</link><pubDate>Tue, 09 Feb 2021 13:33:23 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/middleware/</guid><description>ミドルウェアを使う BotAdapter クラス (AdapterWithErrorHandler.cs) のコンストラクタで Use メソッドを実行する。 public class AdapterWithErrorHandler : BotFrameworkHttpAdapter { public AdapterWithErrorHandler(IConfiguration configuration, ILogger&amp;lt;BotFrameworkHttpAdapter&amp;gt; logger , IStorage storage, UserState userState, ConversationState conversationState) : base(configuration, logger) { this.Use(new AutoSaveStateMiddleware(userState, conversationState)); } } ビルトインのミドルウェア AutoSaveStateMiddleware - コンストラクタに指定した BotState をターンの最後に自動で保</description></item><item><title>Language Generator</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/lg/</link><pubDate>Fri, 08 Jan 2021 13:27:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/lg/</guid><description>はじめに 参考： Generators in adaptive dialogs - Bot Service | Microsoft Docs Language Generator とは、の説明が載っている .lg file format - Bot Service | Microsoft Docs lg ファイルの基本的な書き方が載っている Adaptive expressions prebuilt functions - Bot Service | Microsoft Docs lg ファイル内で利用できる関数が載っている Language Generator は、ボットからのメ</description></item><item><title>LUIS</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/luis/</link><pubDate>Fri, 08 Jan 2021 13:27:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/luis/</guid><description>LUIS を使う あらかじめ、LUIS ポータルサイト でアプリケーションとインテント等の定義を作っておく。 今回は、下記のようなシンプルなインテントを作っておいた。 LUIS ポータルサイトで、アプリケーションID、エンドポ</description></item><item><title>QnA Maker</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/qnamaker/</link><pubDate>Fri, 08 Jan 2021 13:27:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/qnamaker/</guid><description>はじめに 参考： BotBuilder-Samples/samples/csharp_dotnetcore/adaptive-dialog/07.qnamaker at main · microsoft/BotBuilder-Samples Adaptive Dialog で QnAMaker を使う方法を記載する。 MS のドキュメントに載っているのは、ボットのソースコードと一緒に .qna ファイルを作成し、Q&amp;amp;Aのリストを管理する方法だが、 ここに記載するのは、Q</description></item><item><title>その他いろいろ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/other/</link><pubDate>Fri, 08 Jan 2021 13:27:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-dialog/other/</guid><description>CodeAction を使う Adaptive Dialog の Action 部分は Dialog クラスをリストにしたりネストにしたりして実装するが、 処理が複雑でそれだと実装しづらい場合は、Microsoft.Bot.Builder.Dialogs.Adaptive.Act</description></item><item><title>LUIS</title><link>https://vicugna-pacos.github.io/azure/luis/</link><pubDate>Fri, 25 Dec 2020 12:55:45 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/luis/</guid><description>はじめに 参考： https://docs.microsoft.com/en-us/azure/cognitive-services/luis/luis-concept-model https://qiita.com/annie/items/5fdc9030521f8a0ed61c LUISは、ユーザーの発話から意図とデータを抽出できるようにするサービス。チャットボットなどで使う。 つまりLUISを単体で使うことはほとんどなく、チャットボットなどクライアントアプリ</description></item><item><title>Application Insights へログ出力</title><link>https://vicugna-pacos.github.io/dotnetcore/console/logging-app-insights/</link><pubDate>Tue, 08 Dec 2020 16:20:44 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/console/logging-app-insights/</guid><description>概要 コンソールアプリから、Application Insights へログ出力する手順。 前提条件： .NET Core 3.1 Visual Studio 2019 で開発 汎用ホストを使用 参考：Application Insights for Worker Service apps (non-HTTP apps) - Azure Monitor | Microsoft Docs NuGet パッケージの追加 Microsoft.ApplicationInsights.WorkerService をプロジェク</description></item><item><title>コンソールアプリでログ出力</title><link>https://vicugna-pacos.github.io/dotnetcore/logging/</link><pubDate>Thu, 26 Nov 2020 09:34:54 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/logging/</guid><description>概要 前提条件： .NET Core 3.1 Visual Studio 2019 で開発 ASP.NET なら初めから使える(っぽい)ログ出力の機能を、コンソールアプリで使用する方法。 Microsoft.Extensions.Logging パッケージを使用するが、一番お手軽(と思われる)なファイルへの出力機能がない。 コンソー</description></item><item><title>設定ファイルをコンソールアプリで使用する</title><link>https://vicugna-pacos.github.io/dotnetcore/configfile/</link><pubDate>Tue, 24 Nov 2020 16:32:22 +0900</pubDate><guid>https://vicugna-pacos.github.io/dotnetcore/configfile/</guid><description>概要 .NET Core のコンソールアプリケーションでも設定ファイルを利用できる。 NuGet パッケージの Microsoft.Extensions.Configuration とその配下のパッケージを使う。 キーと値のペア かつ キーは複数レベルの階層にわたる設定が作れる。 たとえば、SampleAp</description></item><item><title>「HRESULT からの例外:0x800AC472」のエラー</title><link>https://vicugna-pacos.github.io/powershell/excel/error-0x800ac472/</link><pubDate>Fri, 20 Nov 2020 09:25:33 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/excel/error-0x800ac472/</guid><description>前提条件 Windows 10 PowerShell v5.1 Excelのバージョン：Office 365 概要 PowerShellからExcelを操作しているとき、特定の状況で下記のようなエラーが発生することがある。 &amp;quot;0&amp;quot; 個の引数を指定して &amp;quot;Quit&amp;quot; を呼び出し中に</description></item><item><title>Azure Service Bus</title><link>https://vicugna-pacos.github.io/azure/servicebus/</link><pubDate>Wed, 18 Nov 2020 09:07:09 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/servicebus/</guid><description>前提条件 アプリはC#で実装 価格のメモ 無料プランはない。 価格レベルによって利用できる機能が違う。 Basic → Standard → Premium キューはいずれのプランでも利用可能だが、トピックは Standard 以上の場合利用可能。 準備 Azure ポータルで、Ser</description></item><item><title>XPath</title><link>https://vicugna-pacos.github.io/others/xpath/</link><pubDate>Mon, 09 Nov 2020 15:17:41 +0900</pubDate><guid>https://vicugna-pacos.github.io/others/xpath/</guid><description>参考 xpath cover page - W3C XPath | MDN クローラ作成に必須！XPATHの記法まとめ - Qiita XPath | TECHSCORE(テックスコア) サンプル ↓ルート要素からツリー構造を指定。 /html/body/h1 ↓途中までのツリー構造の指定を省略。ツリー構造の途中</description></item><item><title>Trello APIを実行する</title><link>https://vicugna-pacos.github.io/powershell/trello/</link><pubDate>Mon, 02 Nov 2020 16:26:39 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/trello/</guid><description>はじめに PowerShellで、Trelloのカード作成などを自動化したい。 Windows 10 PowerShell v5.1 APIキーとトークンを取得する 参考：API Introduction https://trello.com/app-key へアクセス。 画面に表示されるAPIキーをコピーして保存しておく。 そのあ</description></item><item><title>繰り返しの予定</title><link>https://vicugna-pacos.github.io/powershell/outlook/recurring/</link><pubDate>Wed, 28 Oct 2020 13:39:53 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/outlook/recurring/</guid><description>はじめに ※ この記事のVBA版はこちら。 Outlookの予定、タスクに設定できる「繰り返し」について。 概要 参照：RecurrencePattern object (Outlook) | Microsoft Docs AppointmentItem または TaskItem で設定できる。 上記2つには IsRecurring(Boolean) プロパテ</description></item><item><title>色々メモ</title><link>https://vicugna-pacos.github.io/powershell/memo/</link><pubDate>Tue, 27 Oct 2020 15:42:25 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/memo/</guid><description>前提条件 基本的に PowerShell v5.1 を使っている。 スクリプトのパスを取得する # スクリプトのフルパス $MyInvocation.MyCommand.Path # スクリプトのフォルダパス Split-Path $MyInvocation.MyCommand.Path -Parent クラスの名前空間を省略する 参考：about_Using - PowerShell | Microsoft Docs using namespace を使うと、.NE</description></item><item><title>逆引き</title><link>https://vicugna-pacos.github.io/nodejs/cheatsheet/</link><pubDate>Mon, 26 Oct 2020 20:16:37 +0900</pubDate><guid>https://vicugna-pacos.github.io/nodejs/cheatsheet/</guid><description>はじめに Windows 10 Node.js のインストールおよびアップデート Node.js ダウンロードページ で最新のダウンロードしてインストールする。 npmも一緒にインストールまたはアップデートされる。 Node.js のバージョン確認 node -v npm install したパッケージ</description></item><item><title>VS Code で記事を書く</title><link>https://vicugna-pacos.github.io/hugo/write-article-with-vscode/</link><pubDate>Wed, 21 Oct 2020 16:33:36 +0900</pubDate><guid>https://vicugna-pacos.github.io/hugo/write-article-with-vscode/</guid><description>はじめに Hugo で作るサイトの Markdown を書くツールとして、VS Code を使う場合にあると便利な拡張機能などの紹介。 Hugo のために作られた拡張機能はいくつかあるようだが、ひとまずは使わずにいる。 Hugo コマンドを実行 Hugo サイトにした</description></item><item><title>Wordの文書の文字をUnicode正規化する</title><link>https://vicugna-pacos.github.io/powershell/normalize-unicode-word/</link><pubDate>Mon, 19 Oct 2020 19:07:37 +0900</pubDate><guid>https://vicugna-pacos.github.io/powershell/normalize-unicode-word/</guid><description>はじめに Wordファイルに対して、Unicode正規化を実施するスクリプトのサンプル。 Windows 10 PowerShell v5.1 Word のバージョンは Office 365 何があったか あるとき、契約書の類いの文書に更新があり、差分をチェックする必要が出た。 提</description></item><item><title>Visual Studio Tips</title><link>https://vicugna-pacos.github.io/others/visualstudio-tips/</link><pubDate>Fri, 25 Sep 2020 10:49:22 +0900</pubDate><guid>https://vicugna-pacos.github.io/others/visualstudio-tips/</guid><description>前提条件 Windows 10 Visual Studio 2019 Community 版 シングルクリックでのファイルのプレビューを止める メニューの「ツール」→「オプション」をクリック。 左側の「環境」→「タブとウィンドウ」をクリック。 右側の「[プレビュー]タブ」にある</description></item><item><title>DX Suite の画像補正豆知識</title><link>https://vicugna-pacos.github.io/others/0916-dxsuite-color/</link><pubDate>Wed, 16 Sep 2020 14:37:05 +0900</pubDate><guid>https://vicugna-pacos.github.io/others/0916-dxsuite-color/</guid><description>はじめに AI-OCRサービスの DX Suite にある画像補正設定の、各設定項目がよく分からなかったので調べてみた。 ※ あくまでもサービス利用者の視点なので、実態とは違うことを書いている可能性あり。 OCR豆知識 だいた</description></item><item><title>pdfファイルを画像にする</title><link>https://vicugna-pacos.github.io/others/0911-pdf-to-image/</link><pubDate>Fri, 11 Sep 2020 11:03:37 +0900</pubDate><guid>https://vicugna-pacos.github.io/others/0911-pdf-to-image/</guid><description>概要 PDFファイルをpngなどの画像へ変換する方法。 フリーの画像編集ソフト「Inkscape」を使う。 (使用したバージョン：1.0.1) 仕事でOCRサービスを使っているが、スキャンした書類から文字を消</description></item><item><title>Visual Studio Code の色々</title><link>https://vicugna-pacos.github.io/vscode/tips/</link><pubDate>Sun, 23 Aug 2020 19:20:57 +0900</pubDate><guid>https://vicugna-pacos.github.io/vscode/tips/</guid><description>はじめに VSCodeの使い方Tips色々 設定 設定画面を開く Ctrl + , を押す。 または、メニューの「ファイル」→「ユーザー設定」→「設定」。 シングルクリックでファイルが開かないようにする 既定だと、ファイルをシ</description></item><item><title>Puppeteer の使い方</title><link>https://vicugna-pacos.github.io/puppeteer/how-to/</link><pubDate>Sat, 14 Dec 2019 11:54:00 +0900</pubDate><guid>https://vicugna-pacos.github.io/puppeteer/how-to/</guid><description>Puppeteerとは Chrome または Chromium を操れるライブラリ。スクレイピングや自動テストに使える。Node.jsから使用できる。 公式サイト https://pptr.dev/ 初稿を書いたときのバージョン：1.19.0 インストール 任意のプロジェク</description></item><item><title/><link>https://vicugna-pacos.github.io/azure/logic-apps/odata-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vicugna-pacos.github.io/azure/logic-apps/odata-query/</guid><description>title: &amp;ldquo;OData クエリ&amp;rdquo; date: 2022-07-28T16:57:23+09:00 draft: true 概要 Power Automate のいくつかのアクションで使えるクエリ言語。 Outlook 「複数のメールの取得 (V3)」アクション (操作 ID:GetEmailsV3) 参照： Microsoft Graph の $search クエリ パラメーターを使用する - Microsoft Graph | Microsoft Docs 既定の検索プロ</description></item></channel></rss>