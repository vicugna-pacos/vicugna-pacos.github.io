<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Bot Service on アルパカのメモ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/</link><description>Recent content in Azure Bot Service on アルパカのメモ</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 30 Sep 2020 17:24:04 +0900</lastBuildDate><atom:link href="https://vicugna-pacos.github.io/azure/azure-bot-service/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Started (VS2019)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started/</link><pubDate>Wed, 23 Sep 2020 19:11:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started/</guid><description>前提条件 Windows 10 Visual Studio 2019 Community 版で開発 言語はC#を選択 参考：Bot Framework SDK for .NET を使用したボットの作成 - Bot Service | Microsoft Docs 開発環境の準備 Bot Framework Emulator をインストール Bot Framework Emulator Bot Framework Emulator は、ローカルでボットをテストするためのツール。 上記サイト</description></item><item><title>Get Started (VS Code)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started-vscode/</link><pubDate>Mon, 12 Oct 2020 15:25:42 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/get-started-vscode/</guid><description>はじめに 開発ツールに VS Code を使用する場合の手順。 前提条件： Windows 10 SDKはC#を選択 Bot Framework Emulator インストール済 VS Code インストール済 参考：Bot Framework SDK for .NET を使用したボットの作成 - Bot Service | Microsoft Docs 準備 .NET Core のインストール .NET Core SDK を</description></item><item><title>ボットを Azure へデプロイ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/deploy/</link><pubDate>Mon, 12 Oct 2020 15:25:42 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/deploy/</guid><description>はじめに ローカルで開発したボットを、GitHubと連携して CI/CD する手順。 前提条件： Windows 10 SDKはC#を選択 ソースコードをGitHubへコミット＆プッシュ GitHubにリポジトリを作成し、ソースコードをコミ</description></item><item><title>ボットのしくみ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/basics/</link><pubDate>Wed, 23 Sep 2020 19:11:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/basics/</guid><description>前提条件 Visual Studio 2019 Community 版で開発 言語はC#を選択 ボットのしくみ 参考：ボットのしくみ - Bot Service | Microsoft Docs ユーザーとボットとの間で行われるやり取りの一つ一つを「アクティビティ」と呼ぶ。 Bot Framework Serviceは、ユーザーがボッ</description></item><item><title>テキストメッセージの送受信</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/send-and-receive-message/</link><pubDate>Fri, 02 Oct 2020 15:09:42 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/send-and-receive-message/</guid><description>メッセージの受信 ユーザーが送ってきたメッセージは、以下のようにして受け取る。 var responseMessage = turnContext.Activity.Text; メッセージの送信 ボットからシンプルなテキストを送るには、以下のようにする。 await turnContext.SendActivityAsync(&amp;#34;Welcome!&amp;#34;); または、以下のようにする。 var text = &amp;#34;Welcome!&amp;#34;; var msg</description></item><item><title>Adaptive Card を送る</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-card/</link><pubDate>Fri, 13 Nov 2020 12:47:14 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/adaptive-card/</guid><description>Adaptive Card とは ボットからユーザーへ送信できるメッセージの一つで、ボタンとか画像とか色々含めたカードのこと。 JSON形式で定義し、カードは色々なプラットフォームで使用できる。 Adaptive Cardのサイト Bot Framework SDK においては</description></item><item><title>State (記憶) の管理</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/state/</link><pubDate>Fri, 02 Oct 2020 12:04:50 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/state/</guid><description>Stateの保存場所 ボットは、Webアプリケーションと同じように基本的にはステートレスである。 1回目のターンでやりとりした内容は、基本的には2回目ではもう覚えていない。 しかし、より充実した機能を提供す</description></item><item><title>会話の実装 (Dialog)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/dialog/</link><pubDate>Fri, 02 Oct 2020 13:55:11 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/dialog/</guid><description>はじめに 参考： Dialogs within the Bot Framework SDK - Bot Service | Microsoft Docs Dialog は SDK の中核をなすもので、ユーザーとボットの会話のやり取りの管理を助けるライブラリである。 ステートレスなWebアプリにおいて、「今どこまで話したか？」を記憶・管理</description></item><item><title>QnA Maker を使用する</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/qnamaker/</link><pubDate>Thu, 22 Oct 2020 17:10:47 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/qnamaker/</guid><description>はじめに テンプレートから作成した Empty Bot に QnA Maker を追加する。 QnA Maker ポータルサイトから「Create Bot」のボタンを使ってボットを作成できるが、 ボットの挙動をカスタマイズしたい場合、空のボットから QnA Maker へ接続す</description></item><item><title>ボットからメッセージを送る (プロアクティブなメッセージ)</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/proactive-message/</link><pubDate>Thu, 17 Dec 2020 15:42:46 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/proactive-message/</guid><description>前提条件 Windows 10 Bot Framework SDK v4 .NET Core C# ボット側からメッセージを送る チャットボットは、基本的にユーザーから会話が始まりボットは返事をするだけだが、ボット側からメッセージを送ることもできる。 ボットから話しかけることを</description></item><item><title>ローカルのボットをTeamsでデバッグ</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/debug-with-teams/</link><pubDate>Fri, 18 Dec 2020 11:35:12 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/debug-with-teams/</guid><description>概要 ローカルでボットをテストする場合、Bot Framework Emulator を使えば基本的なデバッグは行える。 ただこれでは、Teams など特定のアプリと接続したときの検証はできない。 本記事では、ローカルにあるボットを Teams でデバッグ</description></item><item><title>App Insights でログを記録</title><link>https://vicugna-pacos.github.io/azure/azure-bot-service/telemetry/</link><pubDate>Fri, 15 Jan 2021 15:42:29 +0900</pubDate><guid>https://vicugna-pacos.github.io/azure/azure-bot-service/telemetry/</guid><description>はじめに 参考： Add telemetry to your bot - Bot Service | Microsoft Docs Azure に Web アプリを置く場合、ログは Application Insights に記録するのが一つの方法である。 Application Insights にログを記録しておくと、あとから検索・分析ができたりする。 Bot Framework SDK にも、Application Insights</description></item></channel></rss>